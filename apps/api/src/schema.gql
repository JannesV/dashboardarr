# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface ModuleItem {
  id: String!
  position: ModulePosition!
}

type Service {
  name: String!
  id: String!
  type: ServiceType!
  icon: String!
  url: String!
  externalUrl: String
  apiKey: String
}

enum ServiceType {
  Other
  DashDot
  Deluge
  Emby
  Lidarr
  Plex
  qBittorrent
  Radarr
  Readarr
  Sonarr
  Overseerr
  Jellyseerr
  Transmission
  Sabnzbd
}

type UsenetModule implements ModuleItem {
  id: String!
  position: ModulePosition!
  service: Service!
}

type ButtonModule implements ModuleItem {
  id: String!
  position: ModulePosition!
  service: Service!
}

type ModulePosition {
  x: Float!
  y: Float!
  w: Float
  h: Float
}

type SystemInfoModule implements ModuleItem {
  id: String!
  position: ModulePosition!
}

type CalendarModule implements ModuleItem {
  id: String!
  position: ModulePosition!
  services: [Service!]!
  startOfWeek: CalendarWeekStart!
}

enum CalendarWeekStart {
  SUNDAY
  MONDAY
}

type Settings {
  title: String
  logo: String
  favicon: String
  colorMode: ColorMode!
}

enum ColorMode {
  Light
  Dark
  Auto
}

type Config {
  name: String!
  settings: Settings!
  modules: [ModuleItem!]!
}

type DockerPort {
  private: Float!
  public: Float!
}

type DockerContainer {
  id: String!
  name: String!
  image: String!
  status: DockerStatus!
  ports: [DockerPort!]!
}

enum DockerStatus {
  Running
  Created
  Exited
  Unknown
}

type SearchResult {
  image: String
  title: String!
  type: String!
  url: String!
}

type UsenetHistoryItem {
  name: String!
  size: Float!
  id: String!
  time: Float!
  completedOn: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UsenetHistory {
  items: [UsenetHistoryItem!]!
  total: Float!
}

type UsenetInfo {
  paused: Boolean!
  sizeLeft: Float!
  speed: Float!
  eta: Float!
  itemsRemaining: Float!
}

type UsenetQueueItem {
  name: String!
  progress: Float!
  size: Float!
  id: String!
  state: UsenetQueueStatus!
  eta: Float!
}

enum UsenetQueueStatus {
  Paused
  Downloading
  Queued
}

type UsenetQueue {
  items: [UsenetQueueItem!]!
  total: Float!
}

type Info {
  totalMemory: Float!
  usedMemory: Float!
  totalDiskSpace: Float!
}

type CpuLoad {
  time: DateTime!
  value: Float!
}

type Query {
  config(configName: String!): Config!
  configs: [Config!]!
  containers: [DockerContainer!]!
  search(search: String!, limit: Int!): [SearchResult!]!
  calendar(startDate: DateTime!, endDate: DateTime!): [CalendarItem!]!
  usenetHistory(serviceId: String!, limit: Int!, offset: Int!): UsenetHistory!
  usenetQueue(serviceId: String!, limit: Int!, offset: Int!): UsenetQueue!
  usenetInfo(serviceId: String!): UsenetInfo!
  services: [Service!]!
  getSystemInfo: Info!
  cpuLoad: [CpuLoad!]!
}

union CalendarItem = MovieCalendarItem | TvCalendarItem

type MovieCalendarItem {
  movieTitle: String!
  inCinemasDate: DateTime
  digitalDate: DateTime
  imdbId: String!
  poster: String
  genres: [String!]!
  overview: String!
  voteAverage: Float
}

type TvCalendarItem {
  seriesTitle: String!
  episodeTitle: String!
  overview: String!
  airDate: DateTime!
  seasonNumber: Float!
  episodeNumber: Float!
  tvDbId: String!
  imdbId: String!
  poster: String
  genres: [String!]!
}

type Mutation {
  updateConfig(configName: String!, body: String!): Config!
  updateSettings(configName: String!, settings: SettingsInput!): Config!
  updateModulePositions(configName: String!, positions: [ModulePositionInput!]!): Config!
  addModuleItem(configName: String!, module: ModuleItemInput!): Config!
  deleteModuleItem(configName: String!, moduleId: String!): Config!
  updateContainers(ids: [String!]!, action: DockerAction!): [DockerContainer!]!
  pauseUsenetQueue(serviceId: String!): UsenetInfo!
  resumeUsenetQueue(serviceId: String!): UsenetInfo!
  createService(service: ServiceInput!): Service!
  updateService(id: String!, service: ServiceInput!): Service!
  deleteService(ids: [String!]!): Boolean!
}

input SettingsInput {
  title: String
  logo: String
  favicon: String
  colorMode: ColorMode
}

input ModulePositionInput {
  id: String!
  x: Float!
  y: Float!
  w: Float
  h: Float
}

input ModuleItemInput {
  usenet: UsenetModuleInput
  button: ButtonModuleInput
  calendar: CalendarModuleInput
  systemInfo: SystemInfoModuleInput
}

input UsenetModuleInput {
  serviceId: String!
}

input ButtonModuleInput {
  serviceId: String!
}

input CalendarModuleInput {
  startOfWeek: CalendarWeekStart!
}

input SystemInfoModuleInput {
  test: Boolean!
}

enum DockerAction {
  Remove
  Start
  Stop
  Restart
}

input ServiceInput {
  name: String!
  type: ServiceType!
  icon: Upload
  url: String!
  externalUrl: String
  apiKey: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Subscription {
  usenetInfo(serviceId: String!): UsenetInfo!
  usenetQueue(serviceId: String!, limit: Int!, offset: Int!): UsenetQueue!
  usenetHistory(serviceId: String!, limit: Int!, offset: Int!): UsenetHistory!
  cpuLoad: CpuLoad!
}